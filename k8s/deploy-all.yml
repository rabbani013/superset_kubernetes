# Complete Superset Kubernetes Deployment
# This file combines all the necessary resources for a complete Superset deployment

---
# ConfigMap for Superset configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: superset-config
  namespace: default
data:
  superset_config.py: |
    import os

    # ===========================================
    # SIMPLE SUPERSET CONFIGURATION
    # ===========================================

    # Database Settings (PostgreSQL)
    POSTGRES_USER = os.getenv("POSTGRES_USER")
    POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD")
    POSTGRES_HOST = os.getenv("POSTGRES_HOST")
    POSTGRES_DB = os.getenv("POSTGRES_DB")
    POSTGRES_PORT = int(os.getenv("POSTGRES_PORT"))

    # Connect to database
    SQLALCHEMY_DATABASE_URI = f"postgresql+psycopg2://{POSTGRES_USER}:{POSTGRES_PASSWORD}@{POSTGRES_HOST}:{POSTGRES_PORT}/{POSTGRES_DB}"

    # Redis Settings
    REDIS_HOST = os.getenv("REDIS_HOST")
    REDIS_PORT = int(os.getenv("REDIS_PORT"))
    REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")

    # Superset Settings
    SUPERSET_PORT = int(os.getenv("SUPERSET_PORT"))
    SUPERSET_EXTERNAL_PORT = int(os.getenv("SUPERSET_EXTERNAL_PORT"))

    # Email Settings
    EMAIL_NOTIFICATIONS = True
    SMTP_HOST = os.getenv("SMTP_HOST")
    SMTP_PORT = int(os.getenv("SMTP_PORT"))
    SMTP_USER = os.getenv("SMTP_USER")
    SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")
    SMTP_MAIL_FROM = os.getenv("SMTP_MAIL_FROM")
    SMTP_STARTTLS = True
    SMTP_SSL = False

    # Enable email features
    ENABLE_EMAIL_REPORTS = True
    ENABLE_ALERT_EMAIL_REPORTS = True
    ENABLE_SCHEDULED_EMAIL_REPORTS = True

    # App Settings
    APP_NAME = "Superset Analytics"
    SECRET_KEY = "F4Y58kW6frSGa9DfvzKej/xsdQz5nzdkC8CyqKI0CIXXasV3SuUQnSvJ"

    # Enable features
    FEATURE_FLAGS = {
        "ENABLE_PASSWORD_RESET": True,
        "ALERT_REPORTS": True,
        "ALERTS_ATTACH_REPORTS": True,
        "SCHEDULED_EMAIL_REPORTS": True,
        "DASHBOARD_NATIVE_FILTERS": True,
        "DASHBOARD_CROSS_FILTERS": True,
        "DASHBOARD_RBAC": True,
    }

    # Email URL for reports
    WEBDRIVER_BASEURL = f"http://superset-service:8088"
    WEBDRIVER_BASEURL_USER_FRIENDLY = f"http://localhost:30080"

    # ===========================================
    # WELCOME EMAIL FUNCTIONALITY
    # ===========================================

    # Import security manager
    try:
        from superset.security import SupersetSecurityManager
    except ImportError:
        from flask_appbuilder.security.sqla.manager import SecurityManager as SupersetSecurityManager

    # Custom Security Manager to send Welcome Email
    class CustomSecurityManager(SupersetSecurityManager):
        def __init__(self, appbuilder):
            print("üîß CustomSecurityManager initialized!")
            super().__init__(appbuilder)
            
        def add_user(self, username, first_name, last_name, email, role, password="", hashed_password=""):
            print(f"üéØ Creating user via add_user: {username} ({email})")
            user = super().add_user(username, first_name, last_name, email, role, password, hashed_password)
            
            if user and email:
                self._send_welcome_email(user, first_name, last_name, username)
            
            return user
            
        def register_user(self, user):
            print(f"üéØ Registering user via register_user: {user.username} ({user.email})")
            result = super().register_user(user)
            
            if user and hasattr(user, 'email') and user.email:
                self._send_welcome_email(user, getattr(user, 'first_name', ''), getattr(user, 'last_name', ''), user.username)
            
            return result
            
        def _send_welcome_email(self, user, first_name, last_name, username):
            """Send welcome email to user"""
            try:
                print(f"üéØ Sending welcome email to {user.email}")
                
                # Send welcome email using direct SMTP
                import smtplib
                from email.mime.text import MIMEText
                from email.mime.multipart import MIMEMultipart
                from flask import current_app
                
                # Get SMTP configuration
                smtp_host = current_app.config.get('SMTP_HOST', 'smtp.gmail.com')
                smtp_port = current_app.config.get('SMTP_PORT', 587)
                smtp_user = current_app.config.get('SMTP_USER')
                smtp_password = current_app.config.get('SMTP_PASSWORD')
                smtp_mail_from = current_app.config.get('SMTP_MAIL_FROM')
                
                if smtp_user and smtp_password and smtp_mail_from:
                    # Create SMTP connection
                    server = smtplib.SMTP(smtp_host, smtp_port)
                    server.starttls()
                    server.login(smtp_user, smtp_password)
                    
                    # Create email message
                    msg = MIMEMultipart()
                    msg['From'] = smtp_mail_from
                    msg['To'] = user.email
                    msg['Subject'] = f"Welcome to {APP_NAME}"
                    
                    # HTML content
                    html_content = f"""
                    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                        <h2 style="color: #1f4e79;">Welcome to {APP_NAME}!</h2>
                        <p>Hello {first_name or 'User'},</p>
                        <p>Your Superset account has been created successfully.</p>
                        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
                            <p><strong>Username:</strong> {username}</p>
                            <p><strong>Login URL:</strong> <a href="{WEBDRIVER_BASEURL_USER_FRIENDLY}" style="color: #1f4e79;">{WEBDRIVER_BASEURL_USER_FRIENDLY}</a></p>
                        </div>
                        <p>You can now access your analytics dashboard and start creating reports.</p>
                        <p>If you have any questions, please contact your administrator.</p>
                        <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
                        <p style="color: #666; font-size: 12px;">This is an automated message from {APP_NAME}</p>
                    </div>
                    """
                    
                    msg.attach(MIMEText(html_content, 'html'))
                    
                    # Send email
                    server.send_message(msg)
                    server.quit()
                    print(f"‚úÖ Welcome email sent to {user.email}")
                else:
                    print("‚ùå SMTP configuration missing")
            except Exception as e:
                print(f"‚ùå Failed to send welcome email to {user.email}: {e}")

    # Use our custom security manager
    CUSTOM_SECURITY_MANAGER = CustomSecurityManager

    # Flask signal approach for UI user creation
    def send_welcome_email_signal(sender, **kwargs):
        """Send welcome email when user is created via Flask signal"""
        try:
            print("üéØ Flask signal triggered for user creation")
            
            # Get the user object from the signal
            user = kwargs.get('item')
            if user and hasattr(user, 'email') and user.email:
                print(f"üéØ Sending welcome email to {user.email}")
                
                # Send welcome email using direct SMTP
                import smtplib
                from email.mime.text import MIMEText
                from email.mime.multipart import MIMEMultipart
                from flask import current_app
                
                # Get SMTP configuration
                smtp_host = current_app.config.get('SMTP_HOST', 'smtp.gmail.com')
                smtp_port = current_app.config.get('SMTP_PORT', 587)
                smtp_user = current_app.config.get('SMTP_USER')
                smtp_password = current_app.config.get('SMTP_PASSWORD')
                smtp_mail_from = current_app.config.get('SMTP_MAIL_FROM')
                
                if smtp_user and smtp_password and smtp_mail_from:
                    # Create SMTP connection
                    server = smtplib.SMTP(smtp_host, smtp_port)
                    server.starttls()
                    server.login(smtp_user, smtp_password)
                    
                    # Create email message
                    msg = MIMEMultipart()
                    msg['From'] = smtp_mail_from
                    msg['To'] = user.email
                    msg['Subject'] = f"Welcome to {APP_NAME}"
                    
                    # HTML content
                    html_content = f"""
                    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                        <h2 style="color: #1f4e79;">Welcome to {APP_NAME}!</h2>
                        <p>Hello {getattr(user, 'first_name', 'User')},</p>
                        <p>Your Superset account has been created successfully.</p>
                        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
                            <p><strong>Username:</strong> {user.username}</p>
                            <p><strong>Login URL:</strong> <a href="{WEBDRIVER_BASEURL_USER_FRIENDLY}" style="color: #1f4e79;">{WEBDRIVER_BASEURL_USER_FRIENDLY}</a></p>
                        </div>
                        <p>You can now access your analytics dashboard and start creating reports.</p>
                        <p>If you have any questions, please contact your administrator.</p>
                        <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
                        <p style="color: #666; font-size: 12px;">This is an automated message from {APP_NAME}</p>
                    </div>
                    """
                    
                    msg.attach(MIMEText(html_content, 'html'))
                    
                    # Send email
                    server.send_message(msg)
                    server.quit()
                    print(f"‚úÖ Welcome email sent to {user.email}")
                else:
                    print("‚ùå SMTP configuration missing")
            else:
                print("‚ùå No user or email found in signal")
        except Exception as e:
            print(f"‚ùå Signal error: {e}")

    # SQLAlchemy event approach for user creation
    def register_sqlalchemy_events():
        """Register SQLAlchemy events for user creation"""
        try:
            from flask_appbuilder.security.sqla.models import User
            from sqlalchemy import event
            
            @event.listens_for(User, 'after_insert')
            def user_created(mapper, connection, target):
                """Triggered when a new user is inserted into the database"""
                try:
                    print(f"üéØ SQLAlchemy event: User created - {target.username} ({target.email})")
                    
                    if target.email:
                        # Send welcome email using direct SMTP
                        import smtplib
                        from email.mime.text import MIMEText
                        from email.mime.multipart import MIMEMultipart
                        from flask import current_app
                        
                        # Get SMTP configuration
                        smtp_host = current_app.config.get('SMTP_HOST', 'smtp.gmail.com')
                        smtp_port = current_app.config.get('SMTP_PORT', 587)
                        smtp_user = current_app.config.get('SMTP_USER')
                        smtp_password = current_app.config.get('SMTP_PASSWORD')
                        smtp_mail_from = current_app.config.get('SMTP_MAIL_FROM')
                        
                        if smtp_user and smtp_password and smtp_mail_from:
                            # Create SMTP connection
                            server = smtplib.SMTP(smtp_host, smtp_port)
                            server.starttls()
                            server.login(smtp_user, smtp_password)
                            
                            # Create email message
                            msg = MIMEMultipart()
                            msg['From'] = smtp_mail_from
                            msg['To'] = target.email
                            msg['Subject'] = f"Welcome to {APP_NAME}"
                            
                            # HTML content
                            html_content = f"""
                            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                                <h2 style="color: #1f4e79;">Welcome to {APP_NAME}!</h2>
                                <p>Hello {getattr(target, 'first_name', 'User')},</p>
                                <p>Your Superset account has been created successfully.</p>
                                <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
                                    <p><strong>Username:</strong> {target.username}</p>
                                    <p><strong>Login URL:</strong> <a href="{WEBDRIVER_BASEURL_USER_FRIENDLY}" style="color: #1f4e79;">{WEBDRIVER_BASEURL_USER_FRIENDLY}</a></p>
                                </div>
                                <p>You can now access your analytics dashboard and start creating reports.</p>
                                <p>If you have any questions, please contact your administrator.</p>
                                <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
                                <p style="color: #666; font-size: 12px;">This is an automated message from {APP_NAME}</p>
                            </div>
                            """
                            
                            msg.attach(MIMEText(html_content, 'html'))
                            
                            # Send email
                            server.send_message(msg)
                            server.quit()
                            print(f"‚úÖ Welcome email sent to {target.email}")
                        else:
                            print("‚ùå SMTP configuration missing")
                    else:
                        print("‚ùå No email found for user")
                except Exception as e:
                    print(f"‚ùå SQLAlchemy event error: {e}")
            
            print("üîß SQLAlchemy events registered for user creation")
        except Exception as e:
            print(f"‚ùå Failed to register SQLAlchemy events: {e}")

    # Register SQLAlchemy events when the module is imported
    register_sqlalchemy_events()

---
# Secrets for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: superset-secrets
  namespace: default
type: Opaque
data:
  # Base64 encoded values - replace with your actual values
  # To encode: echo -n "your-value" | base64
  postgres-user: c3VwZXJzZXQ=  # superset
  postgres-password: c3VwZXJzZXQ=  # superset
  postgres-db: c3VwZXJzZXQ=  # superset
  redis-password: c3VwZXJzZXQ=  # superset
  smtp-user: cmFhYmJhYW5pQGdtYWlsLmNvbQ==  # raabbaani@gmail.com
  smtp-password: Y3pwc291c3Rra3Zid25mZw==  # czpsoustkkvbwnfg
  smtp-mail-from: cmFhYmJhYW5pQGdtYWlsLmNvbQ==  # raabbaani@gmail.com
  superset-secret-key: RjRZNThrVzZmclNHYTlEZnZ6S2VqL3hzZFF6NW56ZGtDOEN5cUtJMENJWFhhc1YzU3VVUW5TdkI=  # F4Y58kW6frSGa9DfvzKej/xsdQz5nzdkC8CyqKI0CIXXasV3SuUQnSvJ

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: postgres-password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: postgres-db
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - superset
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - superset
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        emptyDir: {}

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: default
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7
        ports:
        - containerPort: 6379
        command: ["redis-server", "--requirepass", "superset"]
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - superset
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - superset
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: default
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Superset Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: superset
  template:
    metadata:
      labels:
        app: superset
    spec:
      containers:
      - name: superset
        image: superset-k8s:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8088
        env:
        # Database Configuration
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: postgres-password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: postgres-db
        - name: POSTGRES_HOST
          value: "postgres-service"
        - name: POSTGRES_PORT
          value: "5432"
        
        # Redis Configuration
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          value: "superset"
        
        # Superset Configuration
        - name: SUPERSET_PORT
          value: "8088"
        - name: SUPERSET_EXTERNAL_PORT
          value: "30080"
        - name: SUPERSET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: superset-secret-key
        - name: SUPERSET_CONFIG_PATH
          value: "/app/superset_config.py"
        
        # SMTP Configuration
        - name: SMTP_HOST
          value: "smtp.gmail.com"
        - name: SMTP_PORT
          value: "587"
        - name: SMTP_USER
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: smtp-user
        - name: SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: smtp-password
        - name: SMTP_MAIL_FROM
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: smtp-mail-from
        
        # Admin Configuration
        - name: ADMIN_USERNAME
          value: "admin"
        - name: ADMIN_FIRSTNAME
          value: "Admin"
        - name: ADMIN_LASTNAME
          value: "User"
        - name: ADMIN_EMAIL
          value: "admin@example.com"
        - name: ADMIN_PASSWORD
          value: "admin"
        
        # Initialization
        - name: INIT_MODE
          value: "fresh"
        
        volumeMounts:
        - name: superset-config
          mountPath: /app/superset_config.py
          subPath: superset_config.py
        - name: superset-exports
          mountPath: /app/superset_home/exports
        
        livenessProbe:
          httpGet:
            path: /health
            port: 8088
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8088
          initialDelaySeconds: 30
          periodSeconds: 10
        
        command: ["/app/entrypoint-superset-final-working.sh"]
        
      volumes:
      - name: superset-config
        configMap:
          name: superset-config
      - name: superset-exports
        emptyDir: {}

---
# Superset Service (NodePort for external access)
apiVersion: v1
kind: Service
metadata:
  name: superset-service
  namespace: default
spec:
  selector:
    app: superset
  ports:
  - port: 8088
    targetPort: 8088
    nodePort: 30080
  type: NodePort

---
# Superset Service (ClusterIP for internal access)
apiVersion: v1
kind: Service
metadata:
  name: superset-service-internal
  namespace: default
spec:
  selector:
    app: superset
  ports:
  - port: 8088
    targetPort: 8088
  type: ClusterIP
